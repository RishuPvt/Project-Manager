// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  email       String        @unique
  password    String
  description String?
  createdAt   DateTime      @default(now())

  users       User[]
  projects    Project[]
  joinRequests JoinRequest[]
   role            Role          @default(ADMIN) 
}

model User {
  id              Int           @id @default(autoincrement())
  name            String
  email           String        @unique
  password        String
  status          Status        @default(PENDING)
  createdAt       DateTime      @default(now())

  organizationId  Int?
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  joinRequests    JoinRequest[]
  tasksAssigned   Task[]        @relation("AssignedTasks")
   sentMessages    Message[]     @relation("SentMessages")
    role            Role          @default(USER) 
}

model JoinRequest {
  id              Int           @id @default(autoincrement())
  userId          Int
  organizationId  Int
  status          Status        @default(PENDING)
  requestedAt     DateTime      @default(now())

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Project {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  status          ProjectStatus @default(ACTIVE)
  createdAt       DateTime      @default(now())

  organizationId  Int
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  tasks           Task[]
  messages        Message[]
}

model Task {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus    @default(TODO)
  priority    TaskPriority  @default(MEDIUM)
  deadline    DateTime?
  file        String?
  createdAt   DateTime      @default(now())

  projectId   Int
  assignedTo  Int?

  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigned    User?         @relation("AssignedTasks", fields: [assignedTo], references: [id], onDelete: SetNull)
}

  model Message {
  id          Int          @id @default(autoincrement())
  message     String
  type        MessageType  @default(CHAT)
  createdAt   DateTime     @default(now())

  senderId    Int
  projectId   Int        

 sender    User    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}


enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum MessageType {
  CHAT
  NOTIFICATION
}
